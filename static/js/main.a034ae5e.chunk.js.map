{"version":3,"sources":["logo.svg","App.js","hooks/useSetInterval.js","reportWebVitals.js","index.js"],"names":["randomGraphGenerator","n","num_nodes","this","nodes","edges","samples","best_dist","i","push","id","length","x","random","y","population","crossover","mutation","vector","shuffle","Array","from","samples_with_dist_and_edges","dist","j","delta_x","delta_y","source","target","sqrt","pow","sample","sort","a","b","keep_samples","new_samples","new_sample","start","randomInt","end","hash","of","k","l","u","v","place","App","useState","setNodes","setEdges","fitness","setFitness","gridSize","setGridSize","numNodes","setNumNodes","randomGraph","setRandomGraph","play","setPlay","setPopulation","setCrossover","setMutation","populationC","setPopulationC","crossoverC","setCrossoverC","mutationC","setMutationC","useEffect","init","cb","time","cbRef","useRef","current","interval","setInterval","clearInterval","useSetInterval","step","_edges","_fitness","concat","Container","Grid","container","spacing","justify","item","xs","data","links","config","width","height","staticGraph","margin","top","right","left","bottom","dataKey","stroke","Typography","gutterBottom","Slider","value","min","max","onChange","event","newValue","onChangeCommitted","valueLabelDisplay","ButtonGroup","color","aria-label","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,+FCWTA,E,WACJ,WAAYC,EAAGC,GAAY,oBACzBC,KAAKF,EAAIA,EACTE,KAAKD,UAAYA,EACjBC,KAAKC,MAAQ,GACbD,KAAKE,MAAQ,GACbF,KAAKG,QAAU,GACfH,KAAKI,UAAY,K,mDAIjB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,KAAKD,UAAWM,IAClCL,KAAKC,MAAMK,KAAK,CACdC,GAAIP,KAAKC,MAAMO,OACfC,EAAGC,YAAO,GAAG,KACbC,EAAGD,YAAO,GAAG,OAIjB,OAAOV,KAAKC,Q,2BAGTW,EAAYC,EAAWC,GAG1B,IAFA,IAAIC,EAAS,GAEJV,EAAI,EAAGA,EAAIL,KAAKD,UAAWM,IAClCU,EAAOT,KAAKD,GAGd,IAAK,IAAIA,EAAIL,KAAKG,QAAQK,OAAQH,EAAIO,EAAYP,IAChDW,YAAQD,GACRf,KAAKG,QAAQG,KAAKW,MAAMC,KAAKH,IAM/B,IAFA,IAAII,EAA8B,GAEzBd,EAAI,EAAGA,EAAIO,EAAYP,IAAM,CAIpC,IAHA,IAAIe,EAAO,EACPlB,EAAQ,GAEHmB,EAAI,EAAGA,EAAIrB,KAAKD,UAAWsB,IAAM,CACxC,IAAIC,OAAO,EACPC,OAAO,EAEPF,GAAKrB,KAAKD,UAAY,GACxBuB,EAAUtB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAIZ,EAAIT,KAAKC,MAAMD,KAAKG,QAAQE,GAAG,IAAII,EAC5Ec,EAAUvB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAIV,EAAIX,KAAKC,MAAMD,KAAKG,QAAQE,GAAG,IAAIM,EAC5ET,EAAMI,KAAK,CACTkB,OAAQxB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAId,GACvCkB,OAAQzB,KAAKC,MAAMD,KAAKG,QAAQE,GAAG,IAAIE,OAGzCe,EAAUtB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAIZ,EAAIT,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,EAAE,IAAIZ,EAC9Ec,EAAUvB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAIV,EAAIX,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,EAAE,IAAIV,EAC9ET,EAAMI,KAAK,CACTkB,OAAQxB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,IAAId,GACvCkB,OAAQzB,KAAKC,MAAMD,KAAKG,QAAQE,GAAGgB,EAAE,IAAId,MAI7Ca,GAAcM,YAAKC,YAAIL,EAAS,GAAKK,YAAIJ,EAAS,IAGpDJ,EAA4Bb,KAAK,CAC/BsB,OAAQ5B,KAAKG,QAAQE,GACrBe,KAAMA,EACNlB,MAAOA,IAIXiB,EAA4BU,MAAK,SAACC,EAAGC,GACnC,OAAID,EAAEV,KAAOW,EAAEX,MACL,EACEU,EAAEV,KAAOW,EAAEX,KACd,EAEA,KASXpB,KAAKI,UAAYe,EAA4B,GAAGC,KAChDpB,KAAKE,MAAQiB,EAA4B,GAAGjB,MAM5C,IAFA,IAAI8B,EAAe,GAEV3B,EAAI,EAAGA,EAAIO,EAAYP,IAAM,EACvBO,EAAaP,GAAKO,EACnBF,YAAO,EAAG,IACpBsB,EAAa1B,KAAKW,MAAMC,KAAKlB,KAAKG,QAAQE,KAe9C,IAFA,IAAI4B,EAAc,GAET5B,EAAI,EAAGA,EAAI2B,EAAaxB,OAAQH,IAAM,CAC7C,IAAK,IAAIgB,EAAIhB,EAAE,EAAGgB,EAAIW,EAAaxB,OAAQa,IAAM,CAC/C,GAAIR,EAAYH,YAAO,EAAG,GAAI,CAQ5B,IAPA,IAAIwB,EAAa,GAEbC,EAAQC,YAAU,EAAGpC,KAAKD,WAC1BsC,EAAMD,YAAUD,EAAOnC,KAAKD,WAE5BuC,EAAOrB,MAAMsB,GAAGvC,KAAKD,WAEhByC,EAAI,EAAGA,EAAIxC,KAAKD,UAAWyC,IAC9BL,GAASK,GAAKA,EAAIH,GACpBH,EAAW5B,KAAK0B,EAAa3B,GAAGmC,IAChCF,EAAKN,EAAa3B,GAAGmC,KAAM,IAE3BN,EAAW5B,MAAM,GACjBgC,EAAKN,EAAa3B,GAAGmC,KAAM,GAO/B,IAFA,IAAIA,EAAI,EACJC,EAAI,EACDD,GAAKxC,KAAKD,YACO,GAAlBmC,EAAWM,GACmB,GAA5BF,EAAKN,EAAaX,GAAGoB,KACvBP,EAAWM,GAAKR,EAAaX,GAAGoB,GAChCA,KAEAA,IAGFD,IAIJP,EAAY3B,KAAK4B,GAGnB,GAAID,EAAYzB,QAAUI,EACxB,MAGJ,GAAIqB,EAAYzB,QAAUI,EACxB,MAIJZ,KAAKG,QAAU8B,EAEf,IAAK,IAAI5B,EAAIL,KAAKG,QAAQK,OAAQH,EAAIO,EAAYP,IAChDW,YAAQD,GACRf,KAAKG,QAAQG,KAAKW,MAAMC,KAAKH,IAK/B,IAAK,IAAIV,EAAI,EAAGA,EAAIO,EAAYP,IAC9B,GAAIS,EAAWJ,YAAO,EAAG,GAAI,CAC3B,IAAIgC,EAAIN,YAAU,EAAGpC,KAAKD,WACtB4C,EAAIP,YAAUM,EAAG1C,KAAKD,WAEtB6C,EAAQ5C,KAAKG,QAAQE,GAAGqC,GAC5B1C,KAAKG,QAAQE,GAAGqC,GAAK1C,KAAKG,QAAQE,GAAGsC,GACrC3C,KAAKG,QAAQE,GAAGsC,GAAKC,EAIzB,MAAO,CAAC5C,KAAKE,MAAOF,KAAKI,a,wCA+MdyC,MAtMf,WAAgB,IAAD,EACaC,mBAAS,CAAC,CAACvC,IAAI,EAAGE,GAAG,GAAIE,GAAG,MADzC,mBACNV,EADM,KACC8C,EADD,OAEaD,mBAAS,IAFtB,mBAEN5C,EAFM,KAEC8C,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAImBJ,mBAAS,GAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKmBN,mBAAS,GAL5B,mBAKNO,EALM,KAKIC,EALJ,OAMyBR,mBAAS,MANlC,mBAMNS,EANM,KAMOC,EANP,OAOWV,oBAAS,GAPpB,mBAONW,EAPM,KAOAC,EAPA,OAQuBZ,mBAAS,KARhC,mBAQNlC,EARM,KAQM+C,EARN,OASqBb,mBAAS,IAT9B,mBASNjC,EATM,KASK+C,EATL,OAUmBd,mBAAS,GAV5B,mBAUNhC,EAVM,KAUI+C,EAVJ,OAWyBf,mBAASlC,GAXlC,mBAWNkD,GAXM,KAWOC,GAXP,QAYuBjB,mBAASjC,GAZhC,qBAYNmD,GAZM,MAYMC,GAZN,SAaqBnB,mBAAShC,GAb9B,qBAaNoD,GAbM,MAaKC,GAbL,MA6Fb,OAhCAC,qBAAU,WACJb,GACFR,EAASQ,EAAYc,UAEtB,CAACd,ICtQwB,SAACe,EAAIC,EAAMd,GACrC,IAAMe,EAAQC,iBAAO,MACrBL,qBAAU,WACNI,EAAME,QAAUJ,KAEpBF,qBAAU,WACN,GAAIX,EAAM,CACN,IAAMkB,EAAWC,aAAY,kBAAMJ,EAAME,YAAWH,GACpD,OAAO,kBAAMM,cAAcF,OAEhC,CAACJ,EAAMd,ID+QZqB,EAAe,WAEb,GADA9B,EAAS,IACLO,EAAa,CAAC,IAAD,EACUA,EAAYwB,KAAKjB,GAAaE,GAAYE,IADpD,mBACVc,EADU,KACFC,EADE,KAEf/B,EAAWD,EAAQiC,OAAO,CAACzE,EAAEwC,EAAQzC,OAAO,EAAGG,EAAEsE,KACjDjC,EAASgC,MAEV,IAAKvB,GAGN,cAAC0B,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,SAASC,MAAI,EAACC,GAAI,EAA1C,SACI,cAAC,QAAD,CAAQlF,GAAG,QACHmF,KAAM,CACJzF,MAAOA,EACP0F,MAAOzF,GAET0F,OAAQ,CACNC,MAAO,IACPC,OAAQ,IACRC,aAAa,OAG3B,cAACX,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,SAASC,MAAI,EAACC,GAAI,EAA1C,SACE,eAAC,IAAD,CAAWI,MAAO,IAAKC,OAAQ,IAAKJ,KAAMzC,EACxC+C,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADjD,UAEE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAMC,QAAQ,IAAIC,OAAO,iBAG7B,eAAClB,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,EAAzB,UACE,cAACc,EAAA,EAAD,CAAYC,cAAY,EAAxB,uBAGA,cAACC,EAAA,EAAD,CACEC,MAAOvD,EACPwD,IAAK,EACLC,IAAK,GACL7B,KAAM,EACN8B,SA9GqB,SAACC,EAAOC,GACrC3D,EAAY2D,IA8GJC,kBAvG8B,SAACF,EAAOC,GAC9C7D,EAAW,IACXF,EAAS,IACTD,EAAS,CAAC,CAACxC,IAAI,EAAGE,GAAG,GAAIE,GAAG,MAC5B6C,EAAe,IAAI3D,EAAqBkH,EAAU1D,KAoG1C4D,kBAAkB,YAGtB,eAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,EAAzB,UACE,cAACc,EAAA,EAAD,CAAYC,cAAY,EAAxB,uBAGA,cAACC,EAAA,EAAD,CACEC,MAAOrD,EACPsD,IAAK,EACLC,IAAKzD,EAASA,EACd4B,KAAM,EACN8B,SAxHqB,SAACC,EAAOC,GACrCzD,EAAYyD,IAwHJC,kBA9G8B,SAACF,EAAOC,GAC9C7D,EAAW,IACXF,EAAS,IACTD,EAAS,CAAC,CAACxC,IAAI,EAAGE,GAAG,GAAIE,GAAG,MAC5B6C,EAAe,IAAI3D,EAAqBsD,EAAU4D,KA2G1CE,kBAAkB,YAGtB,cAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,SAASC,MAAI,EAACC,GAAI,GAA1C,SACE,eAACyB,EAAA,EAAD,CAAaC,MAAM,UAAUC,aAAW,gCAAxC,UACE,cAACC,EAAA,EAAD,CAAQC,QAtEa,SAACR,GAE5BpD,GADED,IAqEI,0BACA,cAAC4D,EAAA,EAAD,CAAQC,QAhFQ,SAACR,GAEzB,GADA9D,EAAS,IACLO,EAAa,CAAC,IAAD,EACUA,EAAYwB,KAAKjB,GAAaE,GAAYE,IADpD,mBACVc,EADU,KACFC,EADE,KAEf/B,EAAWD,EAAQiC,OAAO,CAACzE,EAAEwC,EAAQzC,OAAQG,EAAEsE,KAC/CjC,EAASgC,KA2EH,kBACA,cAACqC,EAAA,EAAD,yBAGJ,eAACjC,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,GAAzB,UACE,cAACc,EAAA,EAAD,CAAYC,cAAY,EAAxB,wBAGA,cAACC,EAAA,EAAD,CACEC,MAAO9F,EACP+F,IAAK,IACLC,IAAK,IACL7B,KAAM,IACN8B,SA3HuB,SAACC,EAAOC,GACvCpD,EAAcoD,IA2HNC,kBAhHgC,SAACF,EAAOC,GAChDhD,GAAegD,IAgHPE,kBAAkB,YAGtB,eAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,GAAzB,UACE,cAACc,EAAA,EAAD,CAAYC,cAAY,EAAxB,uBAGA,cAACC,EAAA,EAAD,CACEC,MAAO7F,EACP8F,IAAK,EACLC,IAAK,EACL7B,KAAM,IACN8B,SArIsB,SAACC,EAAOC,GACtCnD,EAAamD,IAqILC,kBA1H+B,SAACF,EAAOC,GAC/C9C,GAAc8C,IA0HNE,kBAAkB,YAGtB,eAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,GAAzB,UACE,cAACc,EAAA,EAAD,CAAYC,cAAY,EAAxB,sBAGA,cAACC,EAAA,EAAD,CACEC,MAAO5F,EACP6F,IAAK,EACLC,IAAK,EACL7B,KAAM,IACN8B,SA/IqB,SAACC,EAAOC,GACrClD,EAAYkD,IA+IJC,kBApI8B,SAACF,EAAOC,GAC9C5C,GAAa4C,IAoILE,kBAAkB,kBEzXfM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a034ae5e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport { Graph } from \"react-d3-graph\";\nimport { useEffect, useState, useRef } from \"react\"\nimport { ButtonGroup, Button, Container, Grid, Slider, Typography } from '@material-ui/core';\nimport { sqrt, pow, random, randomInt, cross} from 'mathjs';\nimport { shuffle } from 'd3';\nimport { LineChart, XAxis, YAxis, Line } from 'recharts'\nimport { useSetInterval } from './hooks/useSetInterval'\n\nclass randomGraphGenerator {\n  constructor(n, num_nodes) {\n    this.n = n\n    this.num_nodes = num_nodes\n    this.nodes = []\n    this.edges = []\n    this.samples = []\n    this.best_dist = null\n  }\n\n  init() {\n    for (let i = 0; i < this.num_nodes; i ++) {\n      this.nodes.push({\n        id: this.nodes.length,\n        x: random(10,490),\n        y: random(10,490)\n      })\n    }\n    \n    return this.nodes\n  }\n\n  step(population, crossover, mutation) {\n    let vector = []\n\n    for (let i = 0; i < this.num_nodes; i ++) {\n      vector.push(i)\n    }\n    \n    for (let i = this.samples.length; i < population; i ++) {\n      shuffle(vector)\n      this.samples.push(Array.from(vector))\n    }\n\n    // Sorting\n    let samples_with_dist_and_edges = []\n\n    for (let i = 0; i < population; i ++) {\n      let dist = 0\n      let edges = []\n\n      for (let j = 0; j < this.num_nodes; j ++) {\n        let delta_x\n        let delta_y\n\n        if (j == this.num_nodes - 1) {\n          delta_x = this.nodes[this.samples[i][j]].x - this.nodes[this.samples[i][0]].x\n          delta_y = this.nodes[this.samples[i][j]].y - this.nodes[this.samples[i][0]].y\n          edges.push({\n            source: this.nodes[this.samples[i][j]].id, \n            target: this.nodes[this.samples[i][0]].id\n          })\n        } else {\n          delta_x = this.nodes[this.samples[i][j]].x - this.nodes[this.samples[i][j+1]].x\n          delta_y = this.nodes[this.samples[i][j]].y - this.nodes[this.samples[i][j+1]].y\n          edges.push({\n            source: this.nodes[this.samples[i][j]].id, \n            target: this.nodes[this.samples[i][j+1]].id\n          })\n        }\n\n        dist = dist + sqrt(pow(delta_x, 2) + pow(delta_y, 2))\n      }\n\n      samples_with_dist_and_edges.push({\n        sample: this.samples[i],\n        dist: dist,\n        edges: edges\n      })\n    }\n\n    samples_with_dist_and_edges.sort((a, b) => {\n      if (a.dist > b.dist) {\n        return -1\n      } else if ( a.dist < b.dist) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n\n    // if (!this.best_dist || samples_with_dist_and_edges[0].dist > this.best_dist) {\n    //   this.best_dist = samples_with_dist_and_edges[0].dist\n    //   this.edges = samples_with_dist_and_edges[0].edges\n    // } \n\n    this.best_dist = samples_with_dist_and_edges[0].dist\n    this.edges = samples_with_dist_and_edges[0].edges\n\n    // Pruning \n\n    let keep_samples = []\n\n    for (let i = 0; i < population; i ++) {\n      let rank = ( population - i) / population\n      if  (rank > random(0, 1)) {\n        keep_samples.push(Array.from(this.samples[i]))\n      }\n    }\n\n    // this.samples = keep_samples\n\n    // for (let i = this.samples.length; i < population; i ++) {\n    //   shuffle(vector)\n    //   this.samples.push(Array.from(vector))\n    // }\n\n    // Crossover\n\n    let new_samples = []\n\n    for (let i = 0; i < keep_samples.length; i ++) {\n      for (let j = i+1; j < keep_samples.length; j ++) {\n        if (crossover > random(0, 1)) {\n          let new_sample = []\n\n          let start = randomInt(0, this.num_nodes)\n          let end = randomInt(start, this.num_nodes)\n\n          let hash = Array.of(this.num_nodes)\n        \n          for (let k = 0; k < this.num_nodes; k ++) {\n            if (start <= k && k < end) {\n              new_sample.push(keep_samples[i][k])\n              hash[keep_samples[i][k]] = true\n            } else {\n              new_sample.push(-1)\n              hash[keep_samples[i][k]] = false\n            }\n          }\n\n\n          let k = 0;\n          let l = 0;\n          while (k != this.num_nodes) {\n            if (new_sample[k] == -1) {\n              if (hash[keep_samples[j][l]] == false) {\n                new_sample[k] = keep_samples[j][l]\n                l ++\n              } else {\n                l ++\n              }\n            } else {\n              k ++\n            }\n          }\n\n          new_samples.push(new_sample)\n        }\n\n        if (new_samples.length >= population) {\n          break\n        }\n      }\n      if (new_samples.length >= population) {\n        break\n      }\n    }\n\n    this.samples = new_samples\n\n    for (let i = this.samples.length; i < population; i ++) {\n      shuffle(vector)\n      this.samples.push(Array.from(vector))\n    }\n\n    // Mutation\n    \n    for (let i = 0; i < population; i ++) {\n      if (mutation > random(0, 1)) {\n        let u = randomInt(0, this.num_nodes)\n        let v = randomInt(u, this.num_nodes)\n\n        let place = this.samples[i][u]\n        this.samples[i][u] = this.samples[i][v]\n        this.samples[i][v] = place\n      }\n    }\n\n    return [this.edges, this.best_dist]\n  }\n\n  reset() {\n     \n  }  \n}\n\n\nfunction App() {\n  const [nodes, setNodes] = useState([{id:-1, x:-50, y:-50}])\n  const [edges, setEdges] = useState([])\n  const [fitness, setFitness] = useState([])\n  const [gridSize, setGridSize] = useState(5)\n  const [numNodes, setNumNodes] = useState(1)\n  const [randomGraph, setRandomGraph] = useState(null)\n  const [play, setPlay] = useState(false)\n  const [population, setPopulation] = useState(5000)\n  const [crossover, setCrossover] = useState(0.3)\n  const [mutation, setMutation] = useState(0)\n  const [populationC, setPopulationC] = useState(population)\n  const [crossoverC, setCrossoverC] = useState(crossover)\n  const [mutationC, setMutationC] = useState(mutation)\n\n  const onChangeSliderGridSize = (event, newValue) => {\n    setGridSize(newValue)\n  } \n\n  const onChangeSliderNumNodes = (event, newValue) => {\n    setNumNodes(newValue)\n  }\n\n  const onChangeSliderCommittedGridSize = (event, newValue) => {\n    setFitness([])\n    setEdges([])\n    setNodes([{id:-1, x:-50, y:-50}])\n    setRandomGraph(new randomGraphGenerator(newValue, numNodes))\n  }\n\n  const onChangeSliderCommittedNumNodes = (event, newValue) => {\n    setFitness([])\n    setEdges([])\n    setNodes([{id:-1, x:-50, y:-50}])\n    setRandomGraph(new randomGraphGenerator(gridSize, newValue))\n  }\n\n  const onChangeSliderPopulation = (event, newValue) => {\n    setPopulation(newValue)\n  }\n\n  const onChangeSliderCrossover = (event, newValue) => {\n    setCrossover(newValue)\n  }\n\n  const onChangeSliderMutation = (event, newValue) => {\n    setMutation(newValue)\n  }\n\n  const onChangeSliderCommittedPopulation = (event, newValue) => {\n    setPopulationC(newValue)\n  }\n\n  const onChangeSliderCommittedCrossover = (event, newValue) => {\n    setCrossoverC(newValue)\n  }\n\n  const onChangeSliderCommittedMutation = (event, newValue) => {\n    setMutationC(newValue)\n  }\n\n  useEffect(() => {\n    if (randomGraph) {\n      setNodes(randomGraph.init())\n    }\n  }, [randomGraph])\n\n  const onClickButtonStep = (event) => {\n    setEdges([])\n    if (randomGraph) {\n      let [_edges, _fitness] = randomGraph.step(populationC, crossoverC, mutationC)\n      setFitness(fitness.concat({x:fitness.length, y:_fitness}))\n      setEdges(_edges)\n    }\n  }\n\n  const onClickButtonPlayPause = (event) => {\n    if (play) {\n      setPlay(false)\n    } else {\n      setPlay(true)\n    }\n  }\n  \n  useSetInterval(() => {\n    setEdges([])\n    if (randomGraph) {\n      let [_edges, _fitness] = randomGraph.step(populationC, crossoverC, mutationC)\n      setFitness(fitness.concat({x:fitness.length+1, y:_fitness}))\n      setEdges(_edges)\n    }\n  }, 100, play)\n\n  return (\n    <Container>\n      <Grid container spacing={3}>\n        <Grid container justify=\"center\" item xs={6}>\n            <Graph  id=\"graph\"\n                    data={{\n                      nodes: nodes,\n                      links: edges\n                    }}\n                    config={{\n                      width: 500,\n                      height: 500,\n                      staticGraph: true,\n                    }} />\n        </Grid>\n        <Grid container justify=\"center\" item xs={6}>\n          <LineChart width={730} height={500} data={fitness}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis />\n            <YAxis />\n            <Line dataKey=\"y\" stroke=\"#8884d8\" />\n          </LineChart>\n        </Grid>\n        <Grid container item xs={6}>\n          <Typography gutterBottom>\n            Grid Size\n          </Typography>\n          <Slider\n            value={gridSize}\n            min={1}\n            max={10}\n            step={1}\n            onChange={onChangeSliderGridSize}\n            onChangeCommitted={onChangeSliderCommittedGridSize}\n            valueLabelDisplay=\"auto\"\n          />\n          </Grid>\n        <Grid container item xs={6}>\n          <Typography gutterBottom>\n            Num Nodes\n          </Typography>\n          <Slider\n            value={numNodes}\n            min={1}\n            max={gridSize*gridSize}\n            step={1}\n            onChange={onChangeSliderNumNodes}\n            onChangeCommitted={onChangeSliderCommittedNumNodes}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n        <Grid container justify=\"center\" item xs={12}>\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            <Button onClick={onClickButtonPlayPause}>Play / Pause</Button>\n            <Button onClick={onClickButtonStep}>Step</Button>\n            <Button>Reset</Button>\n          </ButtonGroup>\n        </Grid>\n        <Grid container item xs={12}>\n          <Typography gutterBottom>\n            Population\n          </Typography>\n          <Slider\n            value={population}\n            min={100}\n            max={10000}\n            step={100}\n            onChange={onChangeSliderPopulation}\n            onChangeCommitted={onChangeSliderCommittedPopulation}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n        <Grid container item xs={12}>\n          <Typography gutterBottom>\n            Crossover\n          </Typography>\n          <Slider\n            value={crossover}\n            min={0}\n            max={1}\n            step={0.01}\n            onChange={onChangeSliderCrossover}\n            onChangeCommitted={onChangeSliderCommittedCrossover}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n        <Grid container item xs={12}>\n          <Typography gutterBottom>\n            Mutation\n          </Typography>\n          <Slider\n            value={mutation}\n            min={0}\n            max={1}\n            step={0.01}\n            onChange={onChangeSliderMutation}\n            onChangeCommitted={onChangeSliderCommittedMutation}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import {useRef, useEffect} from 'react';\r\n\r\nexport const useSetInterval = (cb, time, play) => {\r\n    const cbRef = useRef(null);\r\n    useEffect(() => {\r\n        cbRef.current = cb\r\n    })\r\n    useEffect(() => {\r\n        if (play) {\r\n            const interval = setInterval(() => cbRef.current(), time);\r\n            return () => clearInterval(interval)\r\n        }\r\n    }, [time, play])\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}